/*
 * Doi Server API
 * A Digital Object Identifier (DOI) is an alphanumeric string assigned to uniquely identify an object. It is tied to a metadata description of the object as well as to a digital location, such as a URL, where all the details about the object are accessible. This documentation provides an API to query the DOI-server.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jean-christophe.malapert@cnes.fr
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataCiteMetadataStoreMdsApiApi {
    private ApiClient apiClient;

    public DataCiteMetadataStoreMdsApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataCiteMetadataStoreMdsApiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelDoiProject
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelDoiProjectCall(String prefix, String project, String doiName, String selectedRole, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mds/metadata/{prefix}/{project}/{doi_name}"
            .replaceAll("\\{" + "prefix" + "\\}", apiClient.escapeString(prefix.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "doi_name" + "\\}", apiClient.escapeString(doiName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (selectedRole != null)
        localVarHeaderParams.put("selectedRole", apiClient.parameterToString(selectedRole));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelDoiProjectValidateBeforeCall(String prefix, String project, String doiName, String selectedRole, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'prefix' is set
        if (prefix == null) {
            throw new ApiException("Missing the required parameter 'prefix' when calling cancelDoiProject(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling cancelDoiProject(Async)");
        }
        
        // verify the required parameter 'doiName' is set
        if (doiName == null) {
            throw new ApiException("Missing the required parameter 'doiName' when calling cancelDoiProject(Async)");
        }
        

        com.squareup.okhttp.Call call = cancelDoiProjectCall(prefix, project, doiName, selectedRole, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * This request marks a dataset as &#39;inactive&#39;
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object cancelDoiProject(String prefix, String project, String doiName, String selectedRole) throws ApiException {
        ApiResponse<Object> resp = cancelDoiProjectWithHttpInfo(prefix, project, doiName, selectedRole);
        return resp.getData();
    }

    /**
     * 
     * This request marks a dataset as &#39;inactive&#39;
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> cancelDoiProjectWithHttpInfo(String prefix, String project, String doiName, String selectedRole) throws ApiException {
        com.squareup.okhttp.Call call = cancelDoiProjectValidateBeforeCall(prefix, project, doiName, selectedRole, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This request marks a dataset as &#39;inactive&#39;
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelDoiProjectAsync(String prefix, String project, String doiName, String selectedRole, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelDoiProjectValidateBeforeCall(prefix, project, doiName, selectedRole, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllDoiMetadata
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllDoiMetadataCall(String prefix, String project, String doiName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mds/metadata/{prefix}/{project}/{doi_name}"
            .replaceAll("\\{" + "prefix" + "\\}", apiClient.escapeString(prefix.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "doi_name" + "\\}", apiClient.escapeString(doiName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllDoiMetadataValidateBeforeCall(String prefix, String project, String doiName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'prefix' is set
        if (prefix == null) {
            throw new ApiException("Missing the required parameter 'prefix' when calling getAllDoiMetadata(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling getAllDoiMetadata(Async)");
        }
        
        // verify the required parameter 'doiName' is set
        if (doiName == null) {
            throw new ApiException("Missing the required parameter 'doiName' when calling getAllDoiMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllDoiMetadataCall(prefix, project, doiName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Get all metdata oi
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getAllDoiMetadata(String prefix, String project, String doiName) throws ApiException {
        ApiResponse<Object> resp = getAllDoiMetadataWithHttpInfo(prefix, project, doiName);
        return resp.getData();
    }

    /**
     * 
     * Get all metdata oi
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getAllDoiMetadataWithHttpInfo(String prefix, String project, String doiName) throws ApiException {
        com.squareup.okhttp.Call call = getAllDoiMetadataValidateBeforeCall(prefix, project, doiName, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all metdata oi
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllDoiMetadataAsync(String prefix, String project, String doiName, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllDoiMetadataValidateBeforeCall(prefix, project, doiName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDoiMedia
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDoiMediaCall(String prefix, String project, String doiName, String selectedRole, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mds/media/{prefix}/{project}/{doi_name}"
            .replaceAll("\\{" + "prefix" + "\\}", apiClient.escapeString(prefix.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "doi_name" + "\\}", apiClient.escapeString(doiName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (selectedRole != null)
        localVarHeaderParams.put("selectedRole", apiClient.parameterToString(selectedRole));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/uri-list"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDoiMediaValidateBeforeCall(String prefix, String project, String doiName, String selectedRole, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'prefix' is set
        if (prefix == null) {
            throw new ApiException("Missing the required parameter 'prefix' when calling getDoiMedia(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling getDoiMedia(Async)");
        }
        
        // verify the required parameter 'doiName' is set
        if (doiName == null) {
            throw new ApiException("Missing the required parameter 'doiName' when calling getDoiMedia(Async)");
        }
        

        com.squareup.okhttp.Call call = getDoiMediaCall(prefix, project, doiName, selectedRole, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retuen a list of pairs of media type and URLs
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> getDoiMedia(String prefix, String project, String doiName, String selectedRole) throws ApiException {
        ApiResponse<List<String>> resp = getDoiMediaWithHttpInfo(prefix, project, doiName, selectedRole);
        return resp.getData();
    }

    /**
     * 
     * Retuen a list of pairs of media type and URLs
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> getDoiMediaWithHttpInfo(String prefix, String project, String doiName, String selectedRole) throws ApiException {
        com.squareup.okhttp.Call call = getDoiMediaValidateBeforeCall(prefix, project, doiName, selectedRole, null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retuen a list of pairs of media type and URLs
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDoiMediaAsync(String prefix, String project, String doiName, String selectedRole, final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDoiMediaValidateBeforeCall(prefix, project, doiName, selectedRole, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLandingPageUrl
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLandingPageUrlCall(String prefix, String project, String doiName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mds/dois/{prefix}/{project}/{doi_name}"
            .replaceAll("\\{" + "prefix" + "\\}", apiClient.escapeString(prefix.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "doi_name" + "\\}", apiClient.escapeString(doiName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLandingPageUrlValidateBeforeCall(String prefix, String project, String doiName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'prefix' is set
        if (prefix == null) {
            throw new ApiException("Missing the required parameter 'prefix' when calling getLandingPageUrl(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling getLandingPageUrl(Async)");
        }
        
        // verify the required parameter 'doiName' is set
        if (doiName == null) {
            throw new ApiException("Missing the required parameter 'doiName' when calling getLandingPageUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = getLandingPageUrlCall(prefix, project, doiName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Retrieves the landing page URL
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getLandingPageUrl(String prefix, String project, String doiName) throws ApiException {
        ApiResponse<String> resp = getLandingPageUrlWithHttpInfo(prefix, project, doiName);
        return resp.getData();
    }

    /**
     * 
     * Retrieves the landing page URL
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getLandingPageUrlWithHttpInfo(String prefix, String project, String doiName) throws ApiException {
        com.squareup.okhttp.Call call = getLandingPageUrlValidateBeforeCall(prefix, project, doiName, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the landing page URL
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLandingPageUrlAsync(String prefix, String project, String doiName, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLandingPageUrlValidateBeforeCall(prefix, project, doiName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postDoiMetadata
     * @param body metadata (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postDoiMetadataCall(String body, String selectedRole, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/mds/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (selectedRole != null)
        localVarHeaderParams.put("selectedRole", apiClient.parameterToString(selectedRole));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postDoiMetadataValidateBeforeCall(String body, String selectedRole, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postDoiMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = postDoiMetadataCall(body, selectedRole, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create or update doi project metadata (short explanation of status code e.g. CREATED, HANDLE_ALREADY_EXISTS)
     * @param body metadata (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String postDoiMetadata(String body, String selectedRole) throws ApiException {
        ApiResponse<String> resp = postDoiMetadataWithHttpInfo(body, selectedRole);
        return resp.getData();
    }

    /**
     * 
     * Create or update doi project metadata (short explanation of status code e.g. CREATED, HANDLE_ALREADY_EXISTS)
     * @param body metadata (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> postDoiMetadataWithHttpInfo(String body, String selectedRole) throws ApiException {
        com.squareup.okhttp.Call call = postDoiMetadataValidateBeforeCall(body, selectedRole, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update doi project metadata (short explanation of status code e.g. CREATED, HANDLE_ALREADY_EXISTS)
     * @param body metadata (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postDoiMetadataAsync(String body, String selectedRole, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postDoiMetadataValidateBeforeCall(body, selectedRole, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postLandingPage
     * @param url the URL of the landing page (required)
     * @param doi the project suffix, which is an unique identifier within the project (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postLandingPageCall(String url, String doi, String selectedRole, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mds/dois";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (selectedRole != null)
        localVarHeaderParams.put("selectedRole", apiClient.parameterToString(selectedRole));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (url != null)
        localVarFormParams.put("url", url);
        if (doi != null)
        localVarFormParams.put("doi", doi);

        final String[] localVarAccepts = {
            "text"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postLandingPageValidateBeforeCall(String url, String doi, String selectedRole, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling postLandingPage(Async)");
        }
        
        // verify the required parameter 'doi' is set
        if (doi == null) {
            throw new ApiException("Missing the required parameter 'doi' when calling postLandingPage(Async)");
        }
        

        com.squareup.okhttp.Call call = postLandingPageCall(url, doi, selectedRole, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Create a **new** doi project or update the landing page url if it the project already exists
     * @param url the URL of the landing page (required)
     * @param doi the project suffix, which is an unique identifier within the project (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String postLandingPage(String url, String doi, String selectedRole) throws ApiException {
        ApiResponse<String> resp = postLandingPageWithHttpInfo(url, doi, selectedRole);
        return resp.getData();
    }

    /**
     * 
     * Create a **new** doi project or update the landing page url if it the project already exists
     * @param url the URL of the landing page (required)
     * @param doi the project suffix, which is an unique identifier within the project (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> postLandingPageWithHttpInfo(String url, String doi, String selectedRole) throws ApiException {
        com.squareup.okhttp.Call call = postLandingPageValidateBeforeCall(url, doi, selectedRole, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a **new** doi project or update the landing page url if it the project already exists
     * @param url the URL of the landing page (required)
     * @param doi the project suffix, which is an unique identifier within the project (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postLandingPageAsync(String url, String doi, String selectedRole, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postLandingPageValidateBeforeCall(url, doi, selectedRole, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postMedia
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postMediaCall(String prefix, String project, String doiName, String selectedRole, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mds/media/{prefix}/{project}/{doi_name}"
            .replaceAll("\\{" + "prefix" + "\\}", apiClient.escapeString(prefix.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "doi_name" + "\\}", apiClient.escapeString(doiName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (selectedRole != null)
        localVarHeaderParams.put("selectedRole", apiClient.parameterToString(selectedRole));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postMediaValidateBeforeCall(String prefix, String project, String doiName, String selectedRole, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'prefix' is set
        if (prefix == null) {
            throw new ApiException("Missing the required parameter 'prefix' when calling postMedia(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling postMedia(Async)");
        }
        
        // verify the required parameter 'doiName' is set
        if (doiName == null) {
            throw new ApiException("Missing the required parameter 'doiName' when calling postMedia(Async)");
        }
        

        com.squareup.okhttp.Call call = postMediaCall(prefix, project, doiName, selectedRole, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * add an association media/url
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String postMedia(String prefix, String project, String doiName, String selectedRole) throws ApiException {
        ApiResponse<String> resp = postMediaWithHttpInfo(prefix, project, doiName, selectedRole);
        return resp.getData();
    }

    /**
     * 
     * add an association media/url
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> postMediaWithHttpInfo(String prefix, String project, String doiName, String selectedRole) throws ApiException {
        com.squareup.okhttp.Call call = postMediaValidateBeforeCall(prefix, project, doiName, selectedRole, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add an association media/url
     * @param prefix DOI prefix (required)
     * @param project Project identifier (required)
     * @param doiName Record ID (required)
     * @param selectedRole the selected role when a user is connected to more than 2 roles. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postMediaAsync(String prefix, String project, String doiName, String selectedRole, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postMediaValidateBeforeCall(prefix, project, doiName, selectedRole, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
